require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/tasks", type: :request do
   let(:valid_attributes) do
    { title: "Valid Task Title" }
  end

  let(:invalid_attributes) do
    { title: "" }
  end

  describe "GET /index" do
    it "renders a successful response" do
      Task.create! valid_attributes
      get tasks_path
      expect(response).to be_successful
    end
  end
   describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Task" do
        expect {
          post tasks_path, params: { task: valid_attributes }
        }.to change(Task, :count).by(1)
      end

      it "redirects to the tasks list" do
        post tasks_path, params: { task: valid_attributes }
        expect(response).to redirect_to(root_path)
      end
    end
end

 describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Task" do
        expect {
          post create_task_path, params: { task: valid_attributes }
        }.to change(Task, :count).by(1)
      end

      it "redirects to the tasks list" do
        post create_task_path, params: { task: valid_attributes }
        expect(response).to redirect_to(root_path)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Task" do
        expect {
          post create_task_path, params: { task: invalid_attributes }
        }.not_to change(Task, :count)
      end

      it "renders a response with 422 status" do
        post create_task_path, params: { task: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

   describe "DELETE /destroy" do
    it "destroys the requested task" do
      task = Task.create! valid_attributes
      expect {
        delete delete_task_path(task)
      }.to change(Task, :count).by(-1)
    end
    it "redirects to the tasks list" do
      task = Task.create! valid_attributes
      delete delete_task_path(task)
      expect(response).to redirect_to(root_path)
    end
  end

   describe "PATCH /update" do
    it "updates the requested task's completed status" do
      task = Task.create! valid_attributes
      patch update_task_path(task), params: { completed: true }
      task.reload
      expect(task.completed).to eq(true)
      expect(response).to redirect_to(root_path)
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested task" do
      task = Task.create! valid_attributes
      expect {
        delete update_task_path(task)
      }.to change(Task, :count).by(-1)
    end

    it "redirects to the tasks list" do
      task = Task.create! valid_attributes
      delete update_task_path(task)
      expect(response).to redirect_to(root_path)
    end
  end
end
